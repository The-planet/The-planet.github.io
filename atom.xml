<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>The-plenet</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-01-25T13:09:16.123Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>KoalaQ</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2020/01/31/matlab%E8%AF%BE%E8%AE%BE%E5%AD%A6%E4%B9%A0/"/>
    <id>http://yoursite.com/2020/01/31/matlab课设学习/</id>
    <published>2020-01-31T02:52:26.464Z</published>
    <updated>2020-01-25T13:09:16.123Z</updated>
    
    <content type="html"><![CDATA[<h4 id="matlab课设学习"><a href="#matlab课设学习" class="headerlink" title="matlab课设学习"></a>matlab课设学习</h4><h6 id="图片变灰"><a href="#图片变灰" class="headerlink" title="图片变灰"></a>图片变灰</h6><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a=imread(<span class="string">'E:\source.jpg'</span>);</span><br><span class="line">source=rgb2gray(a);</span><br><span class="line"><span class="built_in">figure</span>(<span class="number">1</span>);</span><br><span class="line">subplot(<span class="number">121</span>);</span><br><span class="line">imshow(source)</span><br></pre></td></tr></table></figure><p>figure是开启窗口</p><h6 id="矩阵预算"><a href="#矩阵预算" class="headerlink" title="矩阵预算"></a>矩阵预算</h6><ul><li>矩阵相乘和点乘。点乘就是对应元素相乘</li><li>size（）：获取矩阵的行数和列数</li><li>A(:)：将矩阵A中的每列合并成一个长的列向量</li><li>冒号(<code>:</code>)是MATLAB中最有用的操作符之一。它用于创建向量，下标数组，并为迭代指定。<ul><li><a href="https://www.yiibai.com/matlab/matlab_colon_notation.html" target="_blank" rel="noopener">冒号符号</a></li></ul></li><li><a href="https://blog.csdn.net/zaishuiyifangxym/article/details/81746332" target="_blank" rel="noopener">matlab基础知识，矩阵运算</a></li></ul><h6 id="matlab函数形式"><a href="#matlab函数形式" class="headerlink" title="matlab函数形式"></a>matlab函数形式</h6><p>如下所示，是编写的一个求1到n之和的求和函数 eg_sum，按照上述格式，编写代码如下并保存文件，注意文件命名时不能以数字开头：</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="params">[s]</span>  = <span class="title">eg_sum</span><span class="params">( n )</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">% calculate the sum of 1..n</span></span><br><span class="line"></span><br><span class="line">s = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span> = <span class="number">1</span>:n</span><br><span class="line"></span><br><span class="line">    s = s + <span class="built_in">i</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h6 id="函数篇"><a href="#函数篇" class="headerlink" title="函数篇"></a>函数篇</h6><ul><li><p>zeros，生成0矩阵。B=zeros(3,4)，按回车键生成了一个3行4列的零矩阵</p></li><li><p>find函数</p><ul><li><a href="https://blog.csdn.net/wangyang20170901/article/details/78745611" target="_blank" rel="noopener">find函数详解</a></li></ul></li><li><p>size，返回行和列</p></li><li><p>length。数组长度，即行数和列数中的较大值，相当于max(size(a))</p></li><li><p>numel，返回元素总数</p></li><li><p>linspace</p><ul><li>linspace是Matlab中的均分计算指令，用于产生x1,x2之间的N点行线性的矢量。其中x1、x2、N分别为起始值、终止值、元素个数。若默认N，默认点数为100。</li></ul></li><li><p>blkproc是图像进行分块处理。功能：对图像进行分块处理</p><ul><li><p>函数调用形式：B = blkproc(A,[m n],fun, parameter1, parameter2, …)</p><p>B = blkproc(A,[m n],[mborder nborder],fun,…)</p><p>B = blkproc(A,’indexed’,…)</p><p>参数解释：[m n] ：图像以m<em>n为分块单位，对图像进行处理（如8像素</em>8像素）</p><p><a href="https://blog.csdn.net/wangkun1340378/article/details/78682909" target="_blank" rel="noopener">blkproc解释</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Fun：   应用此函数对分别对每个m*n分块的像素进行处理</span><br><span class="line">    </span><br><span class="line">parameter1, parameter2： 要传给fun函数的参数</span><br><span class="line">    </span><br><span class="line">mborder nborder：对每个m*n块上下进行mborder个单位的扩充，左右进行nborder个单位的扩充，扩充的像素值为0，fun函数对整个扩充后的分块进行处理。</span><br></pre></td></tr></table></figure></li></ul></li><li><p>histeq。灰度直方图均衡化（图形对比度太差使用）</p></li><li><p>dct,实现图像的二维离散余弦变换，idct，反变换</p></li></ul><h6 id="原理方面"><a href="#原理方面" class="headerlink" title="原理方面"></a>原理方面</h6><ul><li><p>dct    </p><ul><li><p>离散余弦变换(DCT )是与傅里叶变换相关的一种变换，它类似于离散傅里叶变换(DFT for Discrete Fourier Transform),但是只使用实数。离散余弦变换相当于一个长度大概是它两倍的离散傅里叶变换，这个离散傅里叶变换是对一个实偶函数进行的（因为一个实偶函数的傅里叶变换仍然是一个实偶函数），在有些变形里面需要将输入或者输出的位置移动半个单位(DCT有8种标准类型，其中4种是常见的)。离散余弦变换的第二种类型，经常被信号处理和图像处理使用，用于对信号和图像(包括静止图像和运动图像)进行有损数据压缩。这是由于离散余弦变换具有很强的”能量集中”特性:大多数的自然信号(包括声音和图像)的能量都集中在离散余弦变换后的低频部分，而且当信号具有接近马尔科夫过程(Markov processes)的统计特性时，离散余弦变换的去相关性接近于K-L变换(Karhunen-Loève 变换–它具有最优的去相关性)的性能。</p><p>DCT有一定的能量压缩特性，对于图片来说就是像素值的压缩<br><a href="https://blog.csdn.net/dyq1995/article/details/86149368" target="_blank" rel="noopener">matlab中dct实现</a></p></li></ul></li><li><p>利用huffmandict和huffmanenco实现哈夫曼编码</p><ul><li><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">%ENCO = huffmanenco(SIG, DICT) : 哈夫曼编码函数，SIG为输入编码信号，DICT为编码字典，由函</span></span><br><span class="line"><span class="comment">%数huffmandict（）生成；</span></span><br><span class="line"><span class="comment">%DECO = huffmandeco(COMP, DICT) ：哈夫曼解码函数，COMP为哈夫曼编码向量，即上面的ENCO；</span></span><br><span class="line"></span><br><span class="line"><span class="comment">%DICT = huffmandict(SYM, PROB) ： 哈夫曼字典生成函数，SYM为信源符号向量，包含信息中所有符%号，PROB为相应符号出现的概率；</span></span><br><span class="line">close all;</span><br><span class="line">clc;</span><br><span class="line">I = imread(<span class="string">'lena.bmp'</span>);</span><br><span class="line">[M,N] = <span class="built_in">size</span>(I);</span><br><span class="line"></span><br><span class="line">I1 = I(:);</span><br><span class="line">P = <span class="built_in">zeros</span>(<span class="number">1</span>,<span class="number">256</span>);</span><br><span class="line"><span class="comment">%获取各符号的概率；</span></span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span> = <span class="number">0</span>:<span class="number">255</span></span><br><span class="line">    P(<span class="built_in">i</span>+<span class="number">1</span>) = <span class="built_in">length</span>(<span class="built_in">find</span>(I1 == <span class="built_in">i</span>))/(M*N);</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">k = <span class="number">0</span>:<span class="number">255</span>;</span><br><span class="line">dict = huffmandict(k,P); <span class="comment">%生成字典</span></span><br><span class="line">enco = huffmanenco(I1,dict); <span class="comment">%编码</span></span><br><span class="line"><span class="comment">% for i = 1:256</span></span><br><span class="line"><span class="comment">%     fprintf('%d ', dict&#123;i,2&#125;);</span></span><br><span class="line"><span class="comment">%     fprintf('\n');</span></span><br><span class="line"><span class="comment">% end</span></span><br><span class="line">deco = huffmandeco(enco,dict); <span class="comment">%解码</span></span><br><span class="line">Ide = col2im(deco,[M,N],[M,N],<span class="string">'distinct'</span>); <span class="comment">%把向量重新转换成图像块；</span></span><br><span class="line"><span class="comment">% </span></span><br><span class="line">subplot(<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>);imshow(I);title(<span class="string">'original image'</span>);</span><br><span class="line">subplot(<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>);imshow(uint8(Ide));title(<span class="string">'deco image'</span>);</span><br></pre></td></tr></table></figure></li></ul></li><li><p>JPEG图像压缩算法流程详解</p><p>JPEG是Joint Photographic Exports Group的英文缩写，中文称之为联合图像专家小组。该小组隶属于ISO国际标准化组织，主要负责定制静态数字图像的编码方法，即所谓的JPEG算法。JPEG专家组开发了两种基本的压缩算法、两种熵编码方法、四种编码模式。</p><p><a href="https://blog.csdn.net/carson2005/article/details/7753499" target="_blank" rel="noopener">JPEG图像压缩算法流程详解</a></p></li><li><p>汉明码，是信道编码。</p><ul><li><a href="https://blog.csdn.net/Yonggie/article/details/83186280" target="_blank" rel="noopener">说人话，汉明码</a></li><li><a href="https://blog.csdn.net/flyyufenfei/article/details/72235748" target="_blank" rel="noopener">看的懂的汉明码，编码和校验方法</a></li></ul></li><li><p>fsk，就是两个ask信号相加。对应到matlab中，要先产生基带信号，然后取反，两个信号分别相乘两个载波，再相加，加载生，awgn产生高斯白噪声，rand函数，用来产生随机变量。相干解调直接乘以原来的载波。</p></li><li><p>psk就是把10码串变换为，1-1串，双极性码，基带信号求反，然后用原来的信号减去反信号。2psk通过绝对吗求相对吗然后就是psk了。</p></li></ul><h6 id="课设参考资料"><a href="#课设参考资料" class="headerlink" title="课设参考资料"></a>课设参考资料</h6><ul><li><p><a href="https://blog.csdn.net/weixin_30809333/article/details/96117842" target="_blank" rel="noopener">图像压缩编解码实验(DCT编码+量化+熵编码(哈夫曼编码))【MATLAB】</a></p></li><li><p><a href="https://blog.csdn.net/hxxjxw/article/details/82629113" target="_blank" rel="noopener">基于matlab的二进制数字调制与解调信号的仿真</a></p></li><li><p><a href="https://wenku.baidu.com/view/a06c1d7a710abb68a98271fe910ef12d2af9a9a4.html" target="_blank" rel="noopener">常用函数大全</a></p></li><li><p><a href="https://thecodeway.com/blog/?p=522" target="_blank" rel="noopener">jpeg算法解密</a></p></li></ul><h6 id="keynote："><a href="#keynote：" class="headerlink" title="keynote："></a>keynote：</h6><ul><li><p>抽样频率要大于载波中最高信号频率的二倍。</p></li><li><p>未完成未掌握：</p><ul><li><p>频率滤波方法未学会</p></li><li><p>时域滤波，fir1函数的参数设置，比如第一个滤波器的价数，未掌握</p></li><li><p>包络检波未学会</p></li><li><p>哈夫曼编码matlab未学会</p></li><li><p>汉明码matlab未学会。 </p></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;matlab课设学习&quot;&gt;&lt;a href=&quot;#matlab课设学习&quot; class=&quot;headerlink&quot; title=&quot;matlab课设学习&quot;&gt;&lt;/a&gt;matlab课设学习&lt;/h4&gt;&lt;h6 id=&quot;图片变灰&quot;&gt;&lt;a href=&quot;#图片变灰&quot; class=&quot;head
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2020/01/31/%E8%BD%AF%E4%BB%B6%E5%A4%87%E4%BB%BD%E8%AF%A6%E8%A7%A3/"/>
    <id>http://yoursite.com/2020/01/31/软件备份详解/</id>
    <published>2020-01-31T02:50:24.235Z</published>
    <updated>2019-12-29T02:25:41.819Z</updated>
    
    <content type="html"><![CDATA[<p>软件备份详解</p><h6 id="cc助手"><a href="#cc助手" class="headerlink" title="cc助手"></a>cc助手</h6><ul><li>ctrl+c可以快速复制到助手，类似于抽屉</li></ul><h6 id="eagle"><a href="#eagle" class="headerlink" title="eagle"></a>eagle</h6><ul><li>设计师必用，图片收集</li></ul><h6 id="foxmail"><a href="#foxmail" class="headerlink" title="foxmail"></a>foxmail</h6><ul><li>邮箱</li></ul><h6 id="蓝灯"><a href="#蓝灯" class="headerlink" title="蓝灯"></a>蓝灯</h6><ul><li>vpn</li></ul><h6 id="openVpn"><a href="#openVpn" class="headerlink" title="openVpn"></a>openVpn</h6><ul><li>vpn</li></ul><h6 id="暴雪"><a href="#暴雪" class="headerlink" title="暴雪"></a>暴雪</h6><h6 id="uPlay"><a href="#uPlay" class="headerlink" title="uPlay"></a>uPlay</h6><h6 id="blur-iview-element-weui"><a href="#blur-iview-element-weui" class="headerlink" title="blur,iview,element,weui"></a>blur,iview,element,weui</h6>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;软件备份详解&lt;/p&gt;
&lt;h6 id=&quot;cc助手&quot;&gt;&lt;a href=&quot;#cc助手&quot; class=&quot;headerlink&quot; title=&quot;cc助手&quot;&gt;&lt;/a&gt;cc助手&lt;/h6&gt;&lt;ul&gt;
&lt;li&gt;ctrl+c可以快速复制到助手，类似于抽屉&lt;/li&gt;
&lt;/ul&gt;
&lt;h6 id=&quot;e
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>prisma使用笔记</title>
    <link href="http://yoursite.com/2019/08/22/prisma%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2019/08/22/prisma使用笔记/</id>
    <published>2019-08-22T01:52:40.736Z</published>
    <updated>2019-08-22T01:53:43.085Z</updated>
    
    <content type="html"><![CDATA[<h1 id="prisma使用笔记"><a href="#prisma使用笔记" class="headerlink" title="prisma使用笔记"></a>prisma使用笔记</h1><ul><li><p>npm install prisma  (可以更换淘宝源也可以，npm install -g cnpm –registry=https:``//registry.npm.taobao.org）</p></li><li><p>touch docker-compose.yml   创建docker拉去镜像的文件，</p><ul><li><p><strong>使用 Docker Compose 可以轻松、高效的管理容器，它是一个用于定义和运行多容器 Docker 的应用程序工具</strong></p></li><li><p><a href="https://docs.docker.com/compose/" target="_blank" rel="noopener">官方文档</a></p><ul><li><p>安装，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo curl -L https://github.com/docker/compose/releases/download/1.21.2/docker-compose-$(uname -s)-$(uname -m) -o /usr/local/bin/docker-compose</span><br><span class="line">sudo chmod +x /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure></li><li><p><a href="https://www.jianshu.com/p/658911a8cff3" target="_blank" rel="noopener">简介以及安装参考</a></p></li><li><p>在docker-compose.yml里复制黏贴<a href="https://www.prisma.io/docs/1.34/get-started/01-setting-up-prisma-new-database-TYPESCRIPT-t002/" target="_blank" rel="noopener">官网的例子</a></p></li><li><p>docker-compose.yml<a href="https://www.jianshu.com/p/2217cfed29d7" target="_blank" rel="noopener">配置文件各个字段详解</a></p></li></ul></li></ul></li><li><p>docker-compose up -d ,拉取镜像获取prisma和postgreSQL镜像和容器</p></li><li><p>prisma init –endpoint <a href="http://localhost:4466" target="_blank" rel="noopener">http://localhost:4466</a> 创建两个文件</p><ul><li>这行命令会生成两个文件，datamodel.prisma和prisma.yml，前者是数据库数据格式的基础（规定字段）后者是prismaAPI的基础，比如endpoint就是指定prisma容器的ip地址以及端口。</li></ul></li><li><p>prisma deploy</p><ul><li>把datamodel初始化。生成API服务 ，此时可以打开localhost：4466_admin查看。prisma服务已启动。</li></ul></li><li><p>prisma generate </p><ul><li><p>生成prisma客户端。在prisma.yml后添加</p></li><li><p>生成的客户端要想使用，*<em>必须在client文件夹目录下（即，generated所在目录）yarn add prisma-client-lib *</em></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">generate： </span><br><span class="line">  generator： typescript-client</span><br><span class="line">  output： ./generated/prisma-client</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">表示生成typescript类型的客户端并保存在本地generated目录下 ，可以把generator后边换成javascript-client或者go-client</span><br><span class="line"></span><br><span class="line">  - prisma客户端可以看做mongoose，负责连接数据库。支持js，go等。实则连接prisma服务器，把对ORM操作转换成graphQL语句或者RESTfulAPI语句。从而对数据库进行CURD（增删查改）</span><br><span class="line"></span><br><span class="line">- 具体使用见[官网](https://www.prisma.io/docs/prisma-client/)</span><br></pre></td></tr></table></figure></li></ul><p>ps： 注意docker安装与docker-compose安装。</p><ul><li>实时订阅代码示例</li></ul><figure class="highlight plain"><figcaption><span>userIterator: AsyncIterator<user> </user></span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">const newPostIterator = await prisma.$subscribe</span><br><span class="line">  .post(&#123;</span><br><span class="line">    mutation_in: [&quot;CREATED&quot;],</span><br><span class="line">    node: &#123;</span><br><span class="line">      OR: [&#123; title_contains: &quot;GraphQL&quot; &#125;, &#123; title_contains: &quot;REST&quot; &#125;]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  .node();</span><br><span class="line"></span><br><span class="line">// Endless loop waiting for write-events</span><br><span class="line">while (true) &#123;</span><br><span class="line">  const result = await newPostIterator.next();</span><br><span class="line">  console.log(result)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>next（）函数即为收到消息后的回调函数，在graphql服务器里，订阅类型的http请求会有一个reselove解析函数，负责把消息传回前端。详情见官方demo以及官方文档。<ul><li>个人理解，在执行weile代码块的代码时，因为next（）函数是一个promise对象，他的状态一直时pending，所以一直在等待await的执行，在得到消息后，next（）函数一瞬间变成resolve，但是又马上恢复成pending。所以打印出result以及实现一直订阅。</li></ul></li></ul><h6 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h6><ul><li>prisma Seed 在prisma.yml里面加上：seed： run : node ./seed.js可以初始数据。<ul><li>prisma seed（种子服务） ， prisma seed –reset (删除所有数据进行种子服务)</li></ul></li></ul><p>7.19</p><ul><li>INLINE表示外键关系，TABLE表示专用关系</li><li>A表中的一个字段，是B表的主键，那他就可以是A表的外键</li></ul><h6 id="7-21"><a href="#7-21" class="headerlink" title="7.21"></a>7.21</h6><ul><li>skip分页，last后十条</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;prisma使用笔记&quot;&gt;&lt;a href=&quot;#prisma使用笔记&quot; class=&quot;headerlink&quot; title=&quot;prisma使用笔记&quot;&gt;&lt;/a&gt;prisma使用笔记&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;npm install prisma  (可以更换淘宝源也
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2019/08/21/hello-world/"/>
    <id>http://yoursite.com/2019/08/21/hello-world/</id>
    <published>2019-08-21T12:21:55.108Z</published>
    <updated>2019-08-21T12:21:55.109Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
